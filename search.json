[{"path":"https://ausgis.github.io/geocomplexity/articles/gca.html","id":"improving-model-fitting-utilizing-geographical-complexity-in-spatial-regression-tasks","dir":"Articles","previous_headings":"","what":"Improving Model Fitting Utilizing Geographical Complexity in Spatial Regression Tasks","title":"GeoComplexity Application","text":"","code":"library(sf) ## Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.3.1; sf_use_s2() is TRUE library(tidyverse) ## ── Attaching core tidyverse packages ───────────────────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr     1.1.4     ✔ readr     2.1.5 ## ✔ forcats   1.0.0     ✔ stringr   1.5.1 ## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1 ## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1 ## ✔ purrr     1.0.2 ## ── Conflicts ─────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag()    masks stats::lag() ## ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(geocomplexity)  econineq = sf::read_sf(system.file('extdata/econineq.gpkg',package = 'geocomplexity')) wt1 = sdsfun::spdep_contiguity_swm(econineq,queen = TRUE,style = 'B')"},{"path":"https://ausgis.github.io/geocomplexity/articles/gca.html","id":"incorporating-the-geographical-complexity-of-each-independent-variable-into-the-models-explanatory-variables","dir":"Articles","previous_headings":"Improving Model Fitting Utilizing Geographical Complexity in Spatial Regression Tasks","what":"Incorporating the geographical complexity of each independent variable into the model’s explanatory variables","title":"GeoComplexity Application","text":"","code":"mlr1 = lm(Gini ~ ., data = st_drop_geometry(econineq))  gc1 = geocd_vector(dplyr::select(econineq,-Gini),                    wt = wt1, returnsf = FALSE) mlr2 = lm(Gini ~ ., data = st_drop_geometry(econineq) %>%             dplyr::bind_cols(gc1))  eval_mlr = \\(models,mnames){   R2 = purrr::map_dbl(models,\\(m) summary(m)$r.squared)   AdjR2 = purrr::map_dbl(models,\\(m) summary(m)$adj.r.squared)   t_eval = tibble::tibble(Model = mnames,                           R2,AdjR2)   return(t_eval) }  eval_mlr(list(mlr1,mlr2),          c(\"MLR\",\"GCMLR\")) |>   pander::pander()"},{"path":"https://ausgis.github.io/geocomplexity/articles/gca.html","id":"using-spatial-weight-matrices-that-account-for-geographical-complexity-in-spatial-regression","dir":"Articles","previous_headings":"Improving Model Fitting Utilizing Geographical Complexity in Spatial Regression Tasks","what":"Using spatial weight matrices that account for geographical complexity in spatial regression","title":"GeoComplexity Application","text":"","code":"library(spatialreg) ## Loading required package: spData ## Loading required package: Matrix ##  ## Attaching package: 'Matrix' ## The following objects are masked from 'package:tidyr': ##  ##     expand, pack, unpack  wtl1 = spdep::mat2listw(wt1) ## Warning in spdep::mat2listw(wt1): style is M (missing); style should be set to a valid value ## Warning in spdep::mat2listw(wt1): neighbour object has 2 sub-graphs wt2 = geocs_swm(econineq,wt1,style = \"W\") wtl2 = spdep::mat2listw(wt2,zero.policy = TRUE) ## Warning in spdep::mat2listw(wt2, zero.policy = TRUE): style is M (missing); style should be ## set to a valid value  slm1 = lagsarlm(Gini ~ ., data = st_drop_geometry(econineq),                 listw = wtl1, Durbin = FALSE) slm2 = lagsarlm(Gini ~ ., data = st_drop_geometry(econineq),                 listw = wtl2, Durbin = FALSE) sem1 = errorsarlm(Gini ~ ., data = st_drop_geometry(econineq),                   listw = wtl1, Durbin = FALSE) sem2 = errorsarlm(Gini ~ ., data = st_drop_geometry(econineq),                   listw = wtl2, Durbin = FALSE)  eval_slm = \\(models,mnames){   evt = tibble(Model = mnames,                AIC = purrr::map_dbl(models,AIC),                BIC = purrr::map_dbl(models,BIC),                logLik = purrr::map_dbl(models,logLik))   return(evt) }  eval_slm(list(slm1,slm2,sem1,sem2),          c(\"SLM\",\"GCSLM\",\"SEM\",\"GCSEM\")) |>   pander::pander()"},{"path":"https://ausgis.github.io/geocomplexity/articles/gca.html","id":"geographical-complexity-geographically-weighted-regression","dir":"Articles","previous_headings":"Improving Model Fitting Utilizing Geographical Complexity in Spatial Regression Tasks","what":"geographical complexity-geographically weighted regression","title":"GeoComplexity Application","text":"","code":"g1 = GWmodel3::gwr_basic(   formula = Gini ~ .,   data = econineq,   bw = \"AIC\",   adaptive = TRUE ) ## Warning: st_centroid assumes attributes are constant over geometries g1 ## Geographically Weighted Regression Model ## ======================================== ##   Formula: Gini ~ . ##      Data: econineq ##    Kernel: gaussian ## Bandwidth: 28 (Nearest Neighbours) (Optimized accroding to AIC) ##  ##  ## Summary of Coefficient Estimates ## -------------------------------- ##  Coefficient    Min.  1st Qu.  Median  3rd Qu.    Max.  ##    Intercept  -0.373    0.209   0.347    0.424   0.565  ##    Induscale  -0.342   -0.239  -0.193   -0.147  -0.006  ##           IT  -0.004   -0.003  -0.002   -0.002   0.004  ##       Income  -0.000    0.000   0.000    0.000   0.000  ##       Sexrat  -0.056    0.012   0.052    0.100   0.200  ##     Houseown   0.001    0.002   0.003    0.004   0.005  ##       Indemp  -0.000   -0.000  -0.000   -0.000  -0.000  ##       Indcom   0.000    0.000   0.000    0.000   0.000  ##        Hiedu   0.000    0.002   0.002    0.002   0.004  ##  ##  ## Diagnostic Information ## ---------------------- ##   RSS: 0.1482732 ##   ENP: 79.00112 ##   EDF: 253.9989 ##    R2: 0.8025199 ## R2adj: 0.740855 ##   AIC: -1559.969 ##  AICc: -1460.302 g2 = gwr_geoc(formula = Gini ~ .,               data = econineq,               bw = \"AIC\",               adaptive = TRUE) g2 ## Geographical Complexity-Geographically Weighted Regression Model ## ================================================================ ##      Kernel:  gaussian ##   Bandwidth:  16 (Nearest Neighbours) (Optimized according to AIC) ##       Alpha:  0.05 ##  ## Summary of Coefficient Estimates ## -------------------------------- ## Coefficient      Min.   1st Qu.    Median   3rd Qu.      Max. ## Intercept     -0.356     0.254     0.328     0.391     0.519 ## Induscale     -0.396    -0.267    -0.218    -0.178     0.028 ## IT            -0.004    -0.003    -0.002    -0.002     0.004 ## Income         0.000     0.000     0.000     0.000     0.000 ## Sexrat        -0.045     0.036     0.052     0.093     0.271 ## Houseown       0.001     0.002     0.003     0.003     0.004 ## Indemp        -0.000    -0.000    -0.000    -0.000     0.000 ## Indcom         0.000     0.000     0.000     0.000     0.000 ## Hiedu          0.000     0.001     0.002     0.002     0.004 ##  ## Diagnostic Information ## ---------------------- ##   RSS: 0.123 ##   ENP: 112.902 ##   EDF: 220.098 ##    R2: 0.836 ## R2adj: 0.832 ##   AIC: -1607.940 ##  AICc: -1444.543 ##  RMSE: 0.019  tibble::tibble(   Model = c(\"GWR\",\"GeoCGWR\"),   R2 = c(g1$diagnostic$RSquare,g2$diagnostic$R2),   AdjR2 = c(g1$diagnostic$RSquareAdjust,g2$diagnostic$R2_Adj),   AICc = c(g1$diagnostic$AICc,g2$diagnostic$AICc),   RMSE = c(sqrt(g1$diagnostic$RSS / nrow(econineq)),g2$diagnostic$RMSE) )|>   pander::pander()"},{"path":"https://ausgis.github.io/geocomplexity/articles/gcc.html","id":"calculation-methods-of-geographical-complexity","dir":"Articles","previous_headings":"","what":"Calculation methods of geographical complexity","title":"GeoComplexity Calculation","text":"formula shannon entropy follows: \\[ H(X) = - \\sum_{=1}^{n} p(x_i) \\log_b p(x_i) \\] \\(H(X)\\) entropy random variable \\(X\\), \\(p(x_i)\\) probability random variable \\(X\\) taking value \\(x_i\\), \\(n\\)number possible values \\(X\\) can take, \\(b\\) base logarithm, can 2 (bits), \\(e\\) (natural logarithm, nats), 10 (dits). spatial variance calculated : \\[ \\Gamma = \\frac{\\sum_i \\sum_{j \\neq } \\omega_{ij}\\frac{(y_i-y_j)^2}{2}}{\\sum_i \\sum_{j \\neq } \\omega_{ij}} \\] \\(\\omega_{ij}\\) weight \\(\\)-th location \\(j\\)-th location; \\(y_i\\) \\(y_j\\) dependent variable values \\(\\)-th \\(j\\)-th locations respectively. geographical configuration similarity calculated : \\[ S({\\bf u}_{\\alpha},{\\bf v}_{\\beta})=min\\{E_{}(e_{}({\\bf u}_{\\alpha}),e_{}({\\bf v}_{\\beta}))\\} \\] \\[ E_{}({\\bf u}_{\\alpha},{\\bf v}_{\\beta})=\\exp\\left(-{\\frac{\\left(e_{}({\\bf u}_{\\alpha})-e_{}({\\bf v}_{\\beta})\\right)^{2}}{2\\left(\\sigma^{2}/\\delta({\\bf v}_{\\beta})\\right)^{2}}}\\right) \\] \\[ \\delta({\\bf u}_{\\alpha},{\\bf v})=\\sqrt{\\frac{\\sum_{\\beta=1}^{n}(e({\\bf u}_{\\alpha})-e({\\bf v}_{\\beta}))^{2}}{n}} \\]","code":""},{"path":"https://ausgis.github.io/geocomplexity/articles/gcc.html","id":"considering-the-geographical-complexity-with-spatial-local-dependencies","dir":"Articles","previous_headings":"Calculation methods of geographical complexity","what":"Considering the geographical complexity with spatial local dependencies","title":"GeoComplexity Calculation","text":"formula geocomplexity uses local moran measure method \\[ \\rho_i = -\\frac{1}{m} Z_i \\sum\\limits_{j=1}^m W_{ij} Z_j -\\frac{1}{m} \\sum\\limits_{j=1}^m W_{ij} Z_j \\frac{1}{V_{k}}\\sum\\limits_{k=1}^n W_{jk} W_{ik} Z_k \\] formula geocomplexity uses spatial fluctuation measure method \\[ \\rho_i = Spatial\\_Variance(z_i,z_j) \\] formula geocomplexity uses shannon entropy measure method \\[ \\rho_i = Shannon\\_Entropy(Z_i,Z_j) \\]","code":""},{"path":[]},{"path":"https://ausgis.github.io/geocomplexity/articles/gcc.html","id":"firstly-calculate-global-similarity","dir":"Articles","previous_headings":"Calculation methods of geographical complexity > Considering the geographical complexity with geographical configurations similarities","what":"Firstly, calculate global similarity:","title":"GeoComplexity Calculation","text":"\\[ S = CosineSimilarity(Z_i,Z_j) \\] \\[ S = GeographicalConfigurationsSimilarity(Z_i,Z_j) \\]","code":""},{"path":"https://ausgis.github.io/geocomplexity/articles/gcc.html","id":"the-geographic-complexity-is-then-calculated","dir":"Articles","previous_headings":"Calculation methods of geographical complexity > Considering the geographical complexity with geographical configurations similarities","what":"The geographic complexity is then calculated:","title":"GeoComplexity Calculation","text":"formula geocomplexity uses spatial fluctuation measure method \\[ \\rho_i = Spatial\\_Variance(S_i,S_j) \\] formula geocomplexity uses shannon entropy measure method \\[ \\rho_i = Shannon\\_Entropy(S_i,S_j) \\]","code":""},{"path":[]},{"path":"https://ausgis.github.io/geocomplexity/articles/gcc.html","id":"geographical-complexity-of-individual-variables","dir":"Articles","previous_headings":"Cases for computing geographical complexity","what":"Geographical Complexity of Individual Variables","title":"GeoComplexity Calculation","text":"","code":"library(sf) library(geocomplexity) library(ggplot2) library(viridis) library(patchwork) econineq = sf::read_sf(system.file('extdata/econineq.gpkg',package = 'geocomplexity')) gc = geocd_vector(econineq) gc ## Simple feature collection with 333 features and 9 fields ## Geometry type: MULTIPOLYGON ## Dimension:     XY ## Bounding box:  xmin: 112.9211 ymin: -43.63311 xmax: 153.6299 ymax: -9.223927 ## Geodetic CRS:  GDA94 ## # A tibble: 333 × 10 ##    GC_Gini GC_Induscale GC_IT GC_Income GC_Sexrat GC_Houseown GC_Indemp GC_Indcom GC_Hiedu ##      <dbl>        <dbl> <dbl>     <dbl>     <dbl>       <dbl>     <dbl>     <dbl>    <dbl> ##  1   0.899        0.922 0.945     0.952     0.845       0.906     0.858     0.889    0.924 ##  2   0.895        0.919 0.849     0.925     0.770       0.825     0.853     0.872    0.877 ##  3   0.922        0.919 0.861     0.914     0.729       0.759     0.888     0.911    0.877 ##  4   0.921        0.919 0.834     0.949     0.775       0.807     0.892     0.911    0.863 ##  5   0.850        0.924 0.830     0.930     0.778       0.889     0.863     0.886    0.843 ##  6   0.944        0.920 0.873     0.956     0.782       0.856     0.865     0.929    0.858 ##  7   0.910        0.921 0.891     0.957     0.799       0.865     0.809     0.912    0.834 ##  8   0.924        0.919 0.817     0.938     0.810       0.834     0.910     0.911    0.867 ##  9   0.929        0.919 0.663     0.901     0.768       0.837     0.911     0.914    0.773 ## 10   0.918        0.919 0.841     0.957     0.758       0.863     0.927     0.918    0.823 ## # ℹ 323 more rows ## # ℹ 1 more variable: geometry <MULTIPOLYGON [°]> plot_geocd = \\(.x){   ggplot(gc) +    geom_sf(aes(fill = gc[,.x,drop = TRUE])) +    scale_fill_viridis(option = \"mako\", direction = -1,name = \"\") +    theme_bw() }  fig1 = names(gc)[1:9] %>%   purrr::map(plot_geocd) %>%   wrap_plots(ncol = 3, byrow = TRUE,              guides = \"collect\") +   plot_annotation(tag_levels = 'a',                   tag_prefix = '(',                   tag_suffix = ')',                   tag_sep = '',                   theme = theme(plot.tag = element_text(family = \"serif\"),                                 plot.tag.position = \"topleft\")) fig1"},{"path":"https://ausgis.github.io/geocomplexity/articles/gcc.html","id":"geographical-complexity-of-multiple-variables","dir":"Articles","previous_headings":"Cases for computing geographical complexity","what":"Geographical Complexity of Multiple Variables","title":"GeoComplexity Calculation","text":"","code":"gc_multi = geocs_vector(dplyr::select(econineq,-Gini)) gc_multi ## Simple feature collection with 333 features and 1 field ## Geometry type: MULTIPOLYGON ## Dimension:     XY ## Bounding box:  xmin: 112.9211 ymin: -43.63311 xmax: 153.6299 ymax: -9.223927 ## Geodetic CRS:  GDA94 ## # A tibble: 333 × 2 ##       GC                                                                              geometry ##    <dbl>                                                                    <MULTIPOLYGON [°]> ##  1 0.210 (((149.979 -35.50246, 149.9774 -35.49025, 149.9987 -35.47874, 150.0059 -35.46051, 15… ##  2 0.155 (((148.8041 -35.71402, 148.782 -35.73665, 148.7666 -35.70281, 148.7535 -35.6878, 148… ##  3 0.147 (((150.3754 -35.56524, 150.3725 -35.55018, 150.36 -35.53485, 150.2819 -35.5241, 150.… ##  4 0.213 (((149.0114 -33.93276, 149.0057 -33.94396, 149.013 -33.96863, 149.0114 -33.98291, 14… ##  5 0.184 (((147.7137 -34.16162, 147.7126 -34.17681, 147.728 -34.18633, 147.7443 -34.1801, 147… ##  6 0.353 (((151.485 -33.39868, 151.4645 -33.39985, 151.4539 -33.37713, 151.4415 -33.38963, 15… ##  7 0.307 (((151.485 -33.39868, 151.4839 -33.38366, 151.5049 -33.35415, 151.499 -33.33902, 151… ##  8 0.214 (((149.323 -33.05916, 149.3147 -33.10072, 149.3226 -33.1168, 149.3171 -33.14661, 149… ##  9 0.133 (((149.1264 -33.86642, 149.1349 -33.85089, 149.1314 -33.83058, 149.1155 -33.79723, 1… ## 10 0.180 (((150.5587 -32.75774, 150.5411 -32.75426, 150.527 -32.75969, 150.5182 -32.74934, 15… ## # ℹ 323 more rows fig2 = ggplot(gc_multi) +    geom_sf(aes(fill = GC)) +    scale_fill_viridis(option = \"mako\", direction = -1) +    theme_bw() fig2"},{"path":"https://ausgis.github.io/geocomplexity/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Wenbo Lv. Author, maintainer, copyright holder. Yongze Song. Author. Zehua Zhang. Author.","code":""},{"path":"https://ausgis.github.io/geocomplexity/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhang, Zehua, Song, Yongze, Luo, Peng, Wu, Peng (2023). “Geocomplexity explains spatial errors.” International Journal Geographical Information Science, 37(7), 1449–1469. doi:10.1080/13658816.2023.2203212.","code":"@Article{,   title = {Geocomplexity explains spatial errors},   journal = {International Journal of Geographical Information Science},   volume = {37},   pages = {1449–1469},   year = {2023},   number = {7},   author = {{Zhang} and {Zehua} and {Song} and {Yongze} and {Luo} and {Peng} and {Wu} and {Peng}},   doi = {10.1080/13658816.2023.2203212}, }"},{"path":"https://ausgis.github.io/geocomplexity/index.html","id":"geocomplexity-","dir":"","previous_headings":"","what":"geocomplexity | Mitigating Spatial Bias Through Geographical Complexity\n","title":"geocomplexity | Mitigating Spatial Bias Through Geographical Complexity\n","text":"Mitigating Spatial Bias Geographical Complexity","code":""},{"path":"https://ausgis.github.io/geocomplexity/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"geocomplexity | Mitigating Spatial Bias Through Geographical Complexity\n","text":"Install CRAN : Install development binary version R-universe : Install development source version GitHub : Please ensure appropriate C++ compilation environment configured Rcpp & RcppArmadillo properly installed advance want install geocomplexity source. See next topic C++ Settings information.","code":"install.packages(\"geocomplexity\", dep = TRUE) install.packages('geocomplexity',                  repos = c(\"https://ausgis.r-universe.dev\",                            \"https://cloud.r-project.org\"),                  dep = TRUE) # install.packages(\"devtools\") devtools::install_github(\"ausgis/geocomplexity\",                          build_vignettes = TRUE,                          dep = TRUE)"},{"path":"https://ausgis.github.io/geocomplexity/index.html","id":"set-up-to-use-c-compilation-environment","dir":"","previous_headings":"","what":"Set up to use C++ compilation environment","title":"geocomplexity | Mitigating Spatial Bias Through Geographical Complexity\n","text":"Windows: Download Rtools installer matches version R https://cran.r-project.org/bin/windows/Rtools/ Run installer, Rtools.exe, keeping default settings. Linux Debian/Ubuntu: Fedora/RedHat: set already. MacOS Install Xcode command line tool. , terminal:","code":"apt-get update apt-get install r-base-dev xcode-select --install"},{"path":"https://ausgis.github.io/geocomplexity/reference/geocd_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"geocomplexity for spatial raster data based on spatial dependence — geocd_raster","title":"geocomplexity for spatial raster data based on spatial dependence — geocd_raster","text":"function calculates geocomplexity spatial raster data based spatial dependence.","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocd_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"geocomplexity for spatial raster data based on spatial dependence — geocd_raster","text":"","code":"geocd_raster(r, order = 1, normalize = TRUE, method = \"moran\")"},{"path":"https://ausgis.github.io/geocomplexity/reference/geocd_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"geocomplexity for spatial raster data based on spatial dependence — geocd_raster","text":"r SpatRaster object can converted SpatRaster terra::rast(). order (optional) order adjacency object. Default 1. normalize (optional) Whether normalizes calculated geocomplexity. Default TRUE. method (optional) instances method moran, geocomplexity determined using local moran measure method. Conversely, method spvar, spatial variance attribute data serves characterize geocomplexity. methods, shannon information entropy attribute data employed represent geocomplexity. selection method can made one three options: moran, spvar entropy. Default moran.","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocd_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"geocomplexity for spatial raster data based on spatial dependence — geocd_raster","text":"SpatRaster object","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocd_raster.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"geocomplexity for spatial raster data based on spatial dependence — geocd_raster","text":"contrast geocd_vector() function, geocd_raster() performs operations internally raster data based neighborhood operations(focal) without providing additional wt object.","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocd_raster.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"geocomplexity for spatial raster data based on spatial dependence — geocd_raster","text":"Zehua Zhang, Yongze Song, Peng Luo & Peng Wu (2023) Geocomplexity explains spatial errors, International Journal Geographical Information Science, 37:7, 1449-1469, DOI: 10.1080/13658816.2023.2203212 Anselin, L. (2019). local indicator multivariate spatial association: Extending geary’s c. Geographical Analysis, 51(2), 133–150. https://doi.org/10.1111/gean.12164","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocd_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"geocomplexity for spatial raster data based on spatial dependence — geocd_raster","text":"","code":"library(terra) #> terra 1.8.54 m = matrix(c(3,3,3,3,1,3,              3,3,3,2,1,2,              3,3,3,1,2,1,              1,3,2,2,2,2,              2,2,2,1,1,2,              1,2,1,1,1,1),            nrow = 6,            byrow = TRUE) m = rast(m) names(m) = 'sim' plot(m, col = c(\"#d2eaac\", \"#a3dae1\", \"#8cc1e1\"))  gc1 = geocd_raster(m,1) gc2 = geocd_raster(m,2) gc1 #> class       : SpatRaster  #> size        : 6, 6, 1  (nrow, ncol, nlyr) #> resolution  : 1, 1  (x, y) #> extent      : 0, 6, 0, 6  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory #> name        : GC_sim  #> min value   :      0  #> max value   :      1  plot(gc1)  gc2 #> class       : SpatRaster  #> size        : 6, 6, 1  (nrow, ncol, nlyr) #> resolution  : 1, 1  (x, y) #> extent      : 0, 6, 0, 6  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory #> name        : GC_sim  #> min value   :      0  #> max value   :      1  plot(gc2)"},{"path":"https://ausgis.github.io/geocomplexity/reference/geocd_swm.html","id":null,"dir":"Reference","previous_headings":"","what":"constructing spatial weight matrix based on geocomplexity with spatial dependence — geocd_swm","title":"constructing spatial weight matrix based on geocomplexity with spatial dependence — geocd_swm","text":"constructing spatial weight matrix based geocomplexity spatial dependence","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocd_swm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"constructing spatial weight matrix based on geocomplexity with spatial dependence — geocd_swm","text":"","code":"geocd_swm(sfj, wt = NULL, style = \"B\", ...)"},{"path":"https://ausgis.github.io/geocomplexity/reference/geocd_swm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"constructing spatial weight matrix based on geocomplexity with spatial dependence — geocd_swm","text":"sfj sf object spatial vector object can converted sf sf::st_as_sf(). wt (optional) Spatial weight matrix based spatial adjacency spatial distance relationships. style (optional) character can B,W,C.  see spdep::nb2mat(). Default B. ... (optional) parameters passed geocomplexity::geocd_vector().","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocd_swm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"constructing spatial weight matrix based on geocomplexity with spatial dependence — geocd_swm","text":"matrix","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocd_swm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"constructing spatial weight matrix based on geocomplexity with spatial dependence — geocd_swm","text":"","code":"econineq = sf::read_sf(system.file('extdata/econineq.gpkg',package = 'geocomplexity')) wt_gc = geocd_swm(econineq) wt_gc[1:5,1:5] #>           [,1]      [,2]      [,3]      [,4]      [,5] #> [1,] 0.0000000 0.5050696 0.4544196 0.5640641 0.5800917 #> [2,] 0.4990206 0.0000000 0.8393764 0.0000000 0.0000000 #> [3,] 0.4314267 0.8366975 0.0000000 0.0000000 0.0000000 #> [4,] 0.5440211 0.0000000 0.0000000 0.0000000 0.9429423 #> [5,] 0.5713514 0.0000000 0.0000000 0.9402259 0.0000000"},{"path":"https://ausgis.github.io/geocomplexity/reference/geocd_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"geocomplexity for spatial vector data based on spatial dependence — geocd_vector","title":"geocomplexity for spatial vector data based on spatial dependence — geocd_vector","text":"function calculates geocomplexity spatial vector data based spatial dependence.","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocd_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"geocomplexity for spatial vector data based on spatial dependence — geocd_vector","text":"","code":"geocd_vector(   sfj,   wt = NULL,   method = \"moran\",   normalize = TRUE,   returnsf = TRUE )"},{"path":"https://ausgis.github.io/geocomplexity/reference/geocd_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"geocomplexity for spatial vector data based on spatial dependence — geocd_vector","text":"sfj sf object spatial vector object can converted sf sf::st_as_sf(). wt (optional) Spatial weight matrix. Must matrix class. method (optional) instances method moran, geocomplexity determined using local moran measure method. Conversely, method spvar, spatial variance attribute data serves characterize geocomplexity. methods, shannon information entropy attribute data employed represent geocomplexity. selection method can made one three options: moran, spvar entropy. Default moran. normalize (optional) Whether normalizes calculated geocomplexity. Default TRUE. returnsf (optional) returnsf TRUE, return sf object, otherwise tibble. Default TRUE.","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocd_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"geocomplexity for spatial vector data based on spatial dependence — geocd_vector","text":"tibble (returnsf FALSE) sf object (returnsf TRUE)","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocd_vector.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"geocomplexity for spatial vector data based on spatial dependence — geocd_vector","text":"wt provided, polygon vector data, geocomplexity use first-order queen adjacency binary matrix; point vector data, six nearest points used adjacency objects generate adjacency binary matrix.","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocd_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"geocomplexity for spatial vector data based on spatial dependence — geocd_vector","text":"","code":"econineq = sf::read_sf(system.file('extdata/econineq.gpkg',package = 'geocomplexity')) gc = geocd_vector(econineq) gc #> Simple feature collection with 333 features and 9 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 112.9211 ymin: -43.63311 xmax: 153.6299 ymax: -9.223927 #> Geodetic CRS:  GDA94 #> # A tibble: 333 × 10 #>    GC_Gini GC_Induscale GC_IT GC_Income GC_Sexrat GC_Houseown GC_Indemp #>      <dbl>        <dbl> <dbl>     <dbl>     <dbl>       <dbl>     <dbl> #>  1   0.899        0.922 0.945     0.952     0.845       0.906     0.858 #>  2   0.895        0.919 0.849     0.925     0.770       0.825     0.853 #>  3   0.922        0.919 0.861     0.914     0.729       0.759     0.888 #>  4   0.921        0.919 0.834     0.949     0.775       0.807     0.892 #>  5   0.850        0.924 0.830     0.930     0.778       0.889     0.863 #>  6   0.944        0.920 0.873     0.956     0.782       0.856     0.865 #>  7   0.910        0.921 0.891     0.957     0.799       0.865     0.809 #>  8   0.924        0.919 0.817     0.938     0.810       0.834     0.910 #>  9   0.929        0.919 0.663     0.901     0.768       0.837     0.911 #> 10   0.918        0.919 0.841     0.957     0.758       0.863     0.927 #> # ℹ 323 more rows #> # ℹ 3 more variables: GC_Indcom <dbl>, GC_Hiedu <dbl>, #> #   geometry <MULTIPOLYGON [°]>  library(ggplot2) library(viridis) #> Loading required package: viridisLite ggplot(gc) +    geom_sf(aes(fill = GC_Gini)) +    scale_fill_viridis(option = \"mako\", direction = -1) +    theme_bw()"},{"path":"https://ausgis.github.io/geocomplexity/reference/geocs_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"geocomplexity for spatial raster data based on geographical similarity — geocs_raster","title":"geocomplexity for spatial raster data based on geographical similarity — geocs_raster","text":"function calculates geocomplexity spatial raster data based geographical similarity.","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocs_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"geocomplexity for spatial raster data based on geographical similarity — geocs_raster","text":"","code":"geocs_raster(r, order = 1, normalize = TRUE, similarity = 1, method = \"spvar\")"},{"path":"https://ausgis.github.io/geocomplexity/reference/geocs_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"geocomplexity for spatial raster data based on geographical similarity — geocs_raster","text":"r SpatRaster object can converted SpatRaster terra::rast(). order (optional) order adjacency object. Default 1. normalize (optional) Whether normalizes calculated geocomplexity. Default TRUE. similarity (optional) similarity 1, similarity calculated using geographical configuration similarity, otherwise cosine similarity calculated. Default 1. method (optional) method spvar, variation similarity vector represented using spatial variance, otherwise shannon information entropy used. Default spvar.","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocs_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"geocomplexity for spatial raster data based on geographical similarity — geocs_raster","text":"SpatRaster object","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocs_raster.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"geocomplexity for spatial raster data based on geographical similarity — geocs_raster","text":"contrast geocs_vector() function, geocs_raster() performs operations internally raster data without providing additional wt object.","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocs_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"geocomplexity for spatial raster data based on geographical similarity — geocs_raster","text":"","code":"library(terra) m1 = matrix(c(3,3,3,3,1,3,               3,3,3,2,1,2,               3,3,3,1,2,1,               1,3,2,2,2,2,               2,2,2,1,1,2,               1,2,1,1,1,1),            nrow = 6,            byrow = TRUE) m1 = rast(m1) names(m1) = 'sim1' m2 = m1 set.seed(123456789) values(m2) = values(m1) + runif(ncell(m1),-1,1) names(m2) = 'sim2' m = c(m1,m2) gc1 = geocs_raster(m,1) gc2 = geocs_raster(m,2) gc1 #> class       : SpatRaster  #> size        : 6, 6, 1  (nrow, ncol, nlyr) #> resolution  : 1, 1  (x, y) #> extent      : 0, 6, 0, 6  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory #> name        : GC  #> min value   :  0  #> max value   :  1  plot(gc1)  gc2 #> class       : SpatRaster  #> size        : 6, 6, 1  (nrow, ncol, nlyr) #> resolution  : 1, 1  (x, y) #> extent      : 0, 6, 0, 6  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory #> name        : GC  #> min value   :  0  #> max value   :  1  plot(gc2)"},{"path":"https://ausgis.github.io/geocomplexity/reference/geocs_swm.html","id":null,"dir":"Reference","previous_headings":"","what":"constructing spatial weight matrix based on geocomplexity with similar geographical configurations — geocs_swm","title":"constructing spatial weight matrix based on geocomplexity with similar geographical configurations — geocs_swm","text":"constructing spatial weight matrix based geocomplexity similar geographical configurations","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocs_swm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"constructing spatial weight matrix based on geocomplexity with similar geographical configurations — geocs_swm","text":"","code":"geocs_swm(sfj, wt = NULL, style = \"B\", ...)"},{"path":"https://ausgis.github.io/geocomplexity/reference/geocs_swm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"constructing spatial weight matrix based on geocomplexity with similar geographical configurations — geocs_swm","text":"sfj sf object spatial vector object can converted sf sf::st_as_sf(). wt (optional) Spatial weight matrix based spatial adjacency spatial distance relationships. style (optional) character can B,W,C.  see spdep::nb2mat(). Default B. ... (optional) parameters passed geocomplexity::geocs_vector().","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocs_swm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"constructing spatial weight matrix based on geocomplexity with similar geographical configurations — geocs_swm","text":"matrix","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocs_swm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"constructing spatial weight matrix based on geocomplexity with similar geographical configurations — geocs_swm","text":"","code":"econineq = sf::read_sf(system.file('extdata/econineq.gpkg',package = 'geocomplexity')) wt_gc = geocs_swm(econineq) wt_gc[1:5,1:5] #>           [,1]      [,2]      [,3]      [,4]      [,5] #> [1,] 0.6926861 0.7649766 0.7744006 0.6888728 0.7255376 #> [2,] 0.6926861 0.7649766 0.7744006 0.6888728 0.7255376 #> [3,] 0.6926861 0.7649766 0.7744006 0.6888728 0.7255376 #> [4,] 0.6926861 0.7649766 0.7744006 0.6888728 0.7255376 #> [5,] 0.6926861 0.7649766 0.7744006 0.6888728 0.7255376"},{"path":"https://ausgis.github.io/geocomplexity/reference/geocs_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"geocomplexity for spatial vector data based on geographical similarity — geocs_vector","title":"geocomplexity for spatial vector data based on geographical similarity — geocs_vector","text":"function calculates geocomplexity spatial vector data based geographical similarity.","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocs_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"geocomplexity for spatial vector data based on geographical similarity — geocs_vector","text":"","code":"geocs_vector(   sfj,   wt = NULL,   method = \"spvar\",   similarity = 1,   normalize = TRUE,   returnsf = TRUE )"},{"path":"https://ausgis.github.io/geocomplexity/reference/geocs_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"geocomplexity for spatial vector data based on geographical similarity — geocs_vector","text":"sfj sf object spatial vector object can converted sf sf::st_as_sf(). wt (optional) Spatial weight matrix. Must matrix class. wt provided, geocomplexity use first-order inverse distance weight matrix via sdsfun::inverse_distance_swm() function. method (optional) method spvar, variation similarity vector represented using spatial variance, otherwise shannon information entropy used. Default spvar. similarity (optional) similarity 1, similarity calculated using geographical configuration similarity, otherwise cosine similarity calculated. Default 1. normalize (optional) Whether normalizes calculated geocomplexity. Default TRUE. returnsf (optional) returnsf TRUE, return sf object, otherwise tibble. Default TRUE.","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocs_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"geocomplexity for spatial vector data based on geographical similarity — geocs_vector","text":"tibble (returnsf FALSE) sf object (returnsf TRUE)","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/geocs_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"geocomplexity for spatial vector data based on geographical similarity — geocs_vector","text":"","code":"econineq = sf::read_sf(system.file('extdata/econineq.gpkg',package = 'geocomplexity')) gc = geocs_vector(dplyr::select(econineq,-Gini)) gc #> Simple feature collection with 333 features and 1 field #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 112.9211 ymin: -43.63311 xmax: 153.6299 ymax: -9.223927 #> Geodetic CRS:  GDA94 #> # A tibble: 333 × 2 #>       GC                                                                geometry #>    <dbl>                                                      <MULTIPOLYGON [°]> #>  1 0.210 (((149.979 -35.50246, 149.9774 -35.49025, 149.9987 -35.47874, 150.0059… #>  2 0.155 (((148.8041 -35.71402, 148.782 -35.73665, 148.7666 -35.70281, 148.7535… #>  3 0.147 (((150.3754 -35.56524, 150.3725 -35.55018, 150.36 -35.53485, 150.2819 … #>  4 0.213 (((149.0114 -33.93276, 149.0057 -33.94396, 149.013 -33.96863, 149.0114… #>  5 0.184 (((147.7137 -34.16162, 147.7126 -34.17681, 147.728 -34.18633, 147.7443… #>  6 0.353 (((151.485 -33.39868, 151.4645 -33.39985, 151.4539 -33.37713, 151.4415… #>  7 0.307 (((151.485 -33.39868, 151.4839 -33.38366, 151.5049 -33.35415, 151.499 … #>  8 0.214 (((149.323 -33.05916, 149.3147 -33.10072, 149.3226 -33.1168, 149.3171 … #>  9 0.133 (((149.1264 -33.86642, 149.1349 -33.85089, 149.1314 -33.83058, 149.115… #> 10 0.180 (((150.5587 -32.75774, 150.5411 -32.75426, 150.527 -32.75969, 150.5182… #> # ℹ 323 more rows  library(ggplot2) library(viridis) ggplot(gc) +    geom_sf(aes(fill = GC)) +    scale_fill_viridis(option = \"mako\", direction = -1) +    theme_bw()"},{"path":"https://ausgis.github.io/geocomplexity/reference/gwr_geoc.html","id":null,"dir":"Reference","previous_headings":"","what":"geographical complexity-geographically weighted regression — gwr_geoc","title":"geographical complexity-geographically weighted regression — gwr_geoc","text":"geographical complexity-geographically weighted regression","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/gwr_geoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"geographical complexity-geographically weighted regression — gwr_geoc","text":"","code":"gwr_geoc(   formula,   data,   gcs = NULL,   alpha = seq(0.05, 1, 0.05),   bw = \"RMSE\",   adaptive = TRUE,   kernel = \"gaussian\" )"},{"path":"https://ausgis.github.io/geocomplexity/reference/gwr_geoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"geographical complexity-geographically weighted regression — gwr_geoc","text":"formula formula GCGWR model. data sf object spatial vector object can converted sf sf::st_as_sf(). gcs (optional) geocomplexity matrix corresponding variable, calculated default using geocd_vector(). alpha (optional) Balancing weights attribute similarity matrix geographic distance matrix. bw (optional) bandwidth used selecting models. optimal bandwidth can selected using one three methods: RMSE, AIC, AICc. Default use RMSE. adaptive (optional) Whether bandwidth value adaptive . Default TRUE. kernel (optional) Kernel function. Default gaussian.","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/gwr_geoc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"geographical complexity-geographically weighted regression — gwr_geoc","text":"list GCGWR results. SDF sf tibble coefficients, standard errors t values diagnostic goodness fit indicators args key parameters","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/gwr_geoc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"geographical complexity-geographically weighted regression — gwr_geoc","text":"","code":"# \\donttest{ ## The following code takes a long time to run: econineq = sf::read_sf(system.file('extdata/econineq.gpkg',package = 'geocomplexity')) g = gwr_geoc(formula = Gini ~ ., data = econineq,              alpha = 0.5, bw = \"AIC\", adaptive = TRUE) g #> Geographical Complexity-Geographically Weighted Regression Model #> ================================================================ #>      Kernel:  gaussian #>   Bandwidth:  16 (Nearest Neighbours) (Optimized according to AIC) #>       Alpha:  0.5 #>  #> Summary of Coefficient Estimates #> -------------------------------- #> Coefficient      Min.   1st Qu.    Median   3rd Qu.      Max. #> Intercept     -0.073     0.319     0.333     0.345     0.424 #> Induscale     -0.403    -0.281    -0.249    -0.208    -0.063 #> IT            -0.003    -0.002    -0.002    -0.002     0.001 #> Income         0.000     0.000     0.000     0.000     0.000 #> Sexrat         0.012     0.048     0.058     0.068     0.151 #> Houseown       0.002     0.003     0.003     0.003     0.003 #> Indemp        -0.000    -0.000    -0.000    -0.000    -0.000 #> Indcom         0.000     0.000     0.000     0.000     0.000 #> Hiedu          0.000     0.001     0.001     0.002     0.002 #>  #> Diagnostic Information #> ---------------------- #>   RSS: 0.222 #>   ENP: 47.205 #>   EDF: 285.795 #>    R2: 0.704 #> R2adj: 0.697 #>   AIC: -1458.466 #>  AICc: -1413.992 #>  RMSE: 0.026 #>  # }"},{"path":"https://ausgis.github.io/geocomplexity/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ausgis.github.io/geocomplexity/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ausgis.github.io/geocomplexity/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"NULL (magrittr pipe operator)","code":""},{"path":"https://ausgis.github.io/geocomplexity/news/index.html","id":"geocomplexity-021","dir":"Changelog","previous_headings":"","what":"geocomplexity 0.2.1","title":"geocomplexity 0.2.1","text":"CRAN release: 2024-11-11 Include citation geocomplexity package (#2).","code":""},{"path":"https://ausgis.github.io/geocomplexity/news/index.html","id":"geocomplexity-020","dir":"Changelog","previous_headings":"","what":"geocomplexity 0.2.0","title":"geocomplexity 0.2.0","text":"CRAN release: 2024-10-03 Transfer moran_test function sdsfun package (#1). Removing tidyverse dependencies suggested package.","code":""},{"path":"https://ausgis.github.io/geocomplexity/news/index.html","id":"geocomplexity-010","dir":"Changelog","previous_headings":"","what":"geocomplexity 0.1.0","title":"geocomplexity 0.1.0","text":"CRAN release: 2024-09-24 Support computation geographical complexity leveraging spatial dependence geographical configuration similarity spatial vector spatial raster data. Develop spatial weight matrices leveraging geographical complexity. Implement geographical complexity-geographically weighted regression.","code":""}]
